; 这是注释
; 注释以英文分号开始一行，该行整行都将被忽略
; 注释也可以跟在有效配置的行末，就像下面这样：
server.port = "38760"; 在此设定服务器监听的端口号
; 配置项的值统一为UTF-8编码的字符串，程序内部自行序列化与反序列化
; 该字符串需要以双引号包裹。
; 如果值中含有双引号，那么用 \" 转义表达
; 如果值中含有换行，那么用 \n 转义表达
; 如果值中含有反斜杠，那么用 \\ 转义表达
; 其余字符一律直接书写
; 整个应用的配置可以由多个配置文件构成，每个配置文件的内容由多个配置项构成，
; 每个配置项按照 键名 = 值 的方法表达，其中键名具有层级结构，
; 各层次之间以英文句号分开。
; 从理论上来说，键名成份除去换行符与句号与空白符以及方括号以及等号以及双引号不可以使用之外，
; 其余字符皆可任意使用。
; 但是最好还是限制一下范围，比如仅C语言标志符命名可用字符范围。
; 一般来说，文件名自身除去扩展名属于配置项的键名中的最高层级
; 例如 server.conf 配置文件中含有“port = "38760"”这样的配置项时，
; 意味着其全名为 server.port = "38760"
; 空行将被忽略
; 空白行将被忽略
; 为了方便书写长键名的配置项，可以在这些配置项前插入节标记
[server]
port = "38760"
address = "127.0.0.1"
; 节标记以方括号括起来，方括号中的名字可以拥有层级结构，
; 解析后为“server.port = "38760"”、“server.address = "127.0.0.1"”
; 小节标记将会此标记之后的配置项起作用，除非出现新的节标记将之替换，
; 或者用“[]”标记表明无前缀名字
; 在同一个配置文件中，配置项的覆盖依据后出现的覆盖先出现的同名配置项。
; 对于多个配置文件，因为最高层级的键名成份不同，不存在重名问题。
; 最后，注意键名是区别大小写的！

; BNF形式的配置文件描述
; ConfFile    ::= Line [ LineSeparator Line ]...
; Line        ::= [ ConfItem | SectionSign ] [ ; comment ]
; SectionSign ::= '[' KeyName ']'
; ConfItem    ::= KeyName '=' '"' Value '"' 
; KeyName     ::= NamePart [ '.' NamePart ]...
; NamePart    ::= 'A-Z' | 'a-z' | '_'
; 用点分隔的NamePart之间不要有空格字符
; 等号两旁可以有任意多空格符
